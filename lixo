

	/* definindo ativação */
	data.active = 1;

	/* definindo coluna */
	
	/*:: tamanho da memória ::*/
	data.col = malloc ((strlen(column) + 1) * sizeof (char));

	/*:: checando alocação da memória ::*/
	if (!data.col) {
		CSR_WARN("Insufficient space in memory for \"column\".", "add(char *column, char *value)");
		return 0;
	}

	/*:: definindo string ::*/
	strcpy(data.col, column);
	
	/* definindo valor */

	/*:: tamanho da memória ::*/
	data.val = value == NULL ? malloc (5 * sizeof(char)) : malloc ((strlen(value) + 3) * sizeof(char));

	/*:: checando alocação da memória ::*/
	if (!data.val) {
		CSR_WARN("Insufficient space in memory for \"value\".", "add(char *column, char *value)");
		return 0;
	}

	/*:: definindo string ::*/
	if (value == NULL) {
		strcpy(data.val, "NULL");
	} else {
		strcpy(data.val, "'");
		strcat(data.val, value);
		strcat(data.val, "'");
	}

	//printf("size: %ld\n", sizeof(self->data));

	for (int x = 0; x < 10; x++) {
		printf("x: %d\n", x);
		if (self->data[x].active != 1) {
			self->data = malloc ((x+1) * sizeof(data));
			
			
			
			self->data[x] = data;
			
			
			printf("break-----\n");
			break;
		} else {
			printf("col: %s\n", self->data[x].col);
		}
	}

